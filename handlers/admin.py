import subprocess
import os
import asyncio
from aiogram import types, Dispatcher
from aiogram.filters import Command

ALLOWED_ADMINS = {
    297211090  # sLim
}

REPO_PATH = "/root/bot_7dtd_tg"
SERVICE_NAME = "bot_7dtd_tg.service"

async def update_bot(message: types.Message):
    user_id = message.from_user.id

    if user_id not in ALLOWED_ADMINS:
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞.")

    if not os.path.isdir(REPO_PATH):
        return await message.reply(f"‚ùå –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω: `{REPO_PATH}`", parse_mode="Markdown")

    await message.reply("üîÑ –°–æ—Ö—Ä–∞–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è—é –∏–∑ GitHub...")

    try:
        subprocess.run(["git", "stash", "push", "-m", "Auto stash before update"], cwd=REPO_PATH, check=True)
        subprocess.run(["git", "pull"], cwd=REPO_PATH, check=True)

        try:
            subprocess.run(["git", "stash", "pop"], cwd=REPO_PATH, check=True)
        except subprocess.CalledProcessError:
            await message.reply(
                "‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n"
                "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–ª–∏—Å—å –≤ stash. –ü—Ä–æ–≤–µ—Ä—å –≤—Ä—É—á–Ω—É—é:\n"
                "`git stash list`\n", parse_mode="Markdown"
            )

        await message.reply("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç —á–µ—Ä–µ–∑ systemd...")

        # ‚è≥ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        asyncio.create_task(delayed_restart())

    except subprocess.CalledProcessError as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:\n```\n{e}\n```", parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n```\n{e}\n```", parse_mode="Markdown")

async def delayed_restart():
    await asyncio.sleep(2)  # –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    subprocess.run(["systemctl", "restart", SERVICE_NAME], check=True)

def register_admin(dp: Dispatcher):
    dp.message.register(update_bot, Command("update"))
